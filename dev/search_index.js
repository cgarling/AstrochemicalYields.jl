var documenterSearchIndex = {"docs":
[{"location":"#AstrochemicalYields","page":"Home","title":"AstrochemicalYields","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for AstrochemicalYields.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#AstrochemicalYields.α_elements","page":"Home","title":"AstrochemicalYields.α_elements","text":"List of α elements used in ejecta_alpha_mass taken from Nomoto+2006. C is sometimes included, but not here.\n\n\n\n\n\n","category":"constant"},{"location":"#AstrochemicalYields.AbstractYield","page":"Home","title":"AstrochemicalYields.AbstractYield","text":"AbstractYield is the abstract supertype for all yield tables. Yield table subtypes should be made callable with initial metal mass fraction Z and mass M (in solar masses), returning the yield for all isotopes in units of solar masses. Subtypes should additionally implement the following methods:\n\nisotopes\nremnant_mass\nejecta_mass\nejecta_metal_mass\nejecta_alpha_mass\n\n\n\n\n\n","category":"type"},{"location":"#AstrochemicalYields.Vincenzo2016","page":"Home","title":"AstrochemicalYields.Vincenzo2016","text":"Vincenzo2016(; bounds=Interpolations.Throw())\n\nInterpolator for the stellar lifetime fits of Vincenzo+2016. These are based on PARSEC stellar models. The lifetimes can be interpolated by calling an instance with a metal mass fraction Z and a stellar mass M (in solar masses), returning the stellar lifetime in Gyr. The keyword argument bounds should be a valid Interpolations.jl extrapolation specifier that will determine how the interpolation is extrapolated (e.g., Flat()).\n\njulia> using AstrochemicalYields: Vincenzo2016\n\njulia> v = Vincenzo2016();\n\njulia> M, Z = 1.0, 1e-2;\n\njulia> v(Z, M) ≈ 9.876997213870718\ntrue\n\n\n\n\n\n","category":"type"},{"location":"#AstrochemicalYields.ejecta_alpha_mass-Tuple{AstrochemicalYields.AbstractYield, Any, Any}","page":"Home","title":"AstrochemicalYields.ejecta_alpha_mass","text":"ejecta_alpha_mass(table::AbstractYield, Z, M)\n\nReturns the mass of ejected alpha elements (O, Ne, Mg, Si, S, Ar, Ca, and Ti) for a star with initial metallicity Z and initial stellar mass M (masses in solar masses).\n\n\n\n\n\n","category":"method"},{"location":"#AstrochemicalYields.ejecta_mass-Tuple{AstrochemicalYields.AbstractYield, Any, Any}","page":"Home","title":"AstrochemicalYields.ejecta_mass","text":"ejecta_mass(table::AbstractYield, Z, M)\n\nReturns the mass of all ejected materials for a star with initial metallicity Z and initial stellar mass M (masses in solar masses). This is generally preSN_mass(...) - remnant_mass(...). \n\n\n\n\n\n","category":"method"},{"location":"#AstrochemicalYields.ejecta_metal_mass-Tuple{AstrochemicalYields.AbstractYield, Any, Any}","page":"Home","title":"AstrochemicalYields.ejecta_metal_mass","text":"ejecta_metal_mass(table::AbstractYield, Z, M)\n\nReturns the mass of ejected metals (elements heavier than helium) for a star with initial metallicity Z and initial stellar mass M (masses in solar masses).\n\n\n\n\n\n","category":"method"},{"location":"#AstrochemicalYields.extend_bounds-Tuple{Any, Integer}","page":"Home","title":"AstrochemicalYields.extend_bounds","text":"extend_bounds(x, N::Integer)\n\nIf x isa Number, returns an SVector{N, typeof(x)}(x), else returns x. Used for adapting constant interpolations for Interpolations.jl into multi-valued SVectors.\n\n\n\n\n\n","category":"method"},{"location":"#AstrochemicalYields.isotopes-Tuple{AstrochemicalYields.AbstractYield}","page":"Home","title":"AstrochemicalYields.isotopes","text":"isotopes(table::AbstractYield)\n\nReturns a NTuple{N, Symbol} giving identifiers for the isotopes available in the yield table.\n\n\n\n\n\n","category":"method"},{"location":"#AstrochemicalYields.preSN_mass-Tuple{AstrochemicalYields.AbstractYield, Any, Any}","page":"Home","title":"AstrochemicalYields.preSN_mass","text":"remnant_mass(table::AbstractYield, Z, M)\n\nReturns the pre-supernova mass of a star with initial metallicity Z and initial stellar mass M (masses in solar masses). This is not always equal to the stellar initial mass as massive stars can lose mass due to winds before becoming supernovae.\n\n\n\n\n\n","category":"method"},{"location":"#AstrochemicalYields.remnant_mass-Tuple{AstrochemicalYields.AbstractYield, Any, Any}","page":"Home","title":"AstrochemicalYields.remnant_mass","text":"remnant_mass(table::AbstractYield, Z, M)\n\nReturns the remnant mass of a star with initial metallicity Z and initial stellar mass M (masses in solar masses).\n\n\n\n\n\n","category":"method"},{"location":"#AstrochemicalYields.Kobayashi2006.Kobayashi2006SN","page":"Home","title":"AstrochemicalYields.Kobayashi2006.Kobayashi2006SN","text":"Kobayashi2006SN(; bounds=Interpolations.Throw()) <: AbstractYield\n\nLoad the Kobayashi+2006 core-collapse supernova yield table (this is mostly the same as Nomoto+2006). The yield table can be interpolated by calling it with the metal mass fraction Z and stellar mass M (in solar masses) of the progenitor. The keyword argument bounds should be a valid Interpolations.jl extrapolation specifier that will determine how the interpolation is extrapolated (e.g., Flat()).\n\njulia> n = Kobayashi2006SN();\n\njulia> n(0.002, 13.5) isa NamedTuple\ntrue\n\n\n\n\n\n","category":"type"},{"location":"#AstrochemicalYields.Nomoto2006.Nomoto2006SN","page":"Home","title":"AstrochemicalYields.Nomoto2006.Nomoto2006SN","text":"Nomoto2006SN(; bounds=Interpolations.Throw()) <: AbstractYield\n\nLoad the Nomoto+2006 core-collapse supernova yield table. The yield table can be interpolated by calling it with the metal mass fraction Z and stellar mass M (in solar masses) of the progenitor. The keyword argument bounds should be a valid Interpolations.jl extrapolation specifier that will determine how the interpolation is extrapolated (e.g., Flat()).\n\njulia> n = Nomoto2006SN();\n\njulia> n(0.002, 13.5) isa NamedTuple\ntrue\n\n\n\n\n\n","category":"type"},{"location":"#AstrochemicalYields.Portinari1998.Portinari1998SN","page":"Home","title":"AstrochemicalYields.Portinari1998.Portinari1998SN","text":"Portinari1998SN(; bounds=Interpolations.Throw()) <: AbstractYield\n\nLoad the Portinari+1998 core-collapse supernova yield table. The yield table can be interpolated by calling it with the metal mass fraction Z and stellar mass M (in solar masses) of the progenitor. The keyword argument bounds should be a valid Interpolations.jl extrapolation specifier that will determine how the interpolation is extrapolated (e.g., Flat()).\n\njulia> n = Portinari1998SN();\n\njulia> n(0.002, 13.5) isa NamedTuple\ntrue\n\n\n\n\n\n","category":"type"}]
}
